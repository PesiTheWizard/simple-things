//**** Defines used to model the castling Moves. ****
(define "HasNeverMoved"
	(= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
	(set State at:#1 0) 
)

(define "RememberPieceHasMoved"
	(then 
		(if 
			(= (state at:(last To)) 1) 
			("PieceHasMoved" (last To))
		) 
	) 
)

(define "KingNotCheckedAndToEmpty"
	(and 
		(is Empty (to)) 
		(not ("IsInCheck" "King" Mover at:(to)))
	) 
)

(define "DecideToCastle"
	(move Slide 
		(from (mapEntry #1 (mover))) 
		#2 
		(between 
			(exact #3) 
			if:#4
		) 
		(to 
			if:True
			(apply ("PieceHasMoved" (from)))
		)
		#5
	)
)

(define "CastleRook"
	(slide 
		(from (mapEntry #1 (mover))) 
		#2 
		(between 
			(exact #3) 
			if:#4
		) 
		(to 
			if:True
			(apply ("PieceHasMoved" (from)))
		)
	)
)

(define "SmallCastling"
	("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
	("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "Castling"
	(if (and 
			("HasNeverMoved" "King")
			(not ("IsInCheck" "King" Mover)) 
		)
		(or
			(if (and 
					("HasNeverMoved" "RookLeft")
					(can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
				)
				"BigCastling"
			)
			(if (and 
					("HasNeverMoved" "RookRight")
					(can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
				)
				"SmallCastling"
			)
		)
	)
)

//**** Defines used to model the extra Pawn moves. ****
(define "SetEnPassantLocation"
	(then 
		(set Pending (ahead (last To) Backward))
	)
)

(define "InLocationEnPassant"
	(and 
		(is Pending) 
		(= (to) (value Pending)) 
	)
)

(define "EnPassant"
	(move Step 
		(directions {FR FL}) 
		(to if:"InLocationEnPassant") 
		(then 
			(remove 
				(ahead (last To) Backward)
			)
		)
	)
)

(define "InitialPawnMove"
	(if (is In (from) (sites Start (piece (what at:(from)))))
		("DoubleStepForwardToEmpty" "SetEnPassantLocation")
	)
)
//------------------------------------------------------------------------------
(define "ThenPromoteTo"
	(then
		(if
			(is In (last To) (sites Mover "Promotion"))
			(and
				(move Promote (last To) (piece #1) Mover)
				(set Counter)
			)
		)
	)
)
(define "DisplaceKillTo"
	(to
		if:(not ("IsFriendAt" (to)))
		(apply
			(if ("IsEnemyAt" (to))
				(remove (to)
					(then (set Counter))
				)
			)
		)
	)
)
//------------------------------------------------------------------------------

(game "Shinobi" 
	("TwoPlayersNorthSouth") 
	(equipment { 
		(board (square 8)) 
		
		("ChessPawn" "Pawn"
			(or 
				"InitialPawnMove"
				"EnPassant"
			)
			("ThenPromoteTo" "Commoner")
		)
		("ChessRook" "Rook" (then (set Counter)) ("RememberPieceHasMoved"))
		("ChessKing" "King" (then (set Counter)) ("RememberPieceHasMoved"))
		("ChessBishop" "Bishop" (then (set Counter)))
		("ChessKnight" "Knight" (then (set Counter)))
		("ChessKing" "Commoner" (then (set Counter)))//Captain
		(piece "Queen" P2
			("SlideCapture" ~ ~ (then (set Counter)))
		)
		(piece "Horse" P1//Wooden Horse
			(move Leap
				"KnightWalk"
				rotations:False //LudiiGameLogicGuide.pdf contradiction - it's lowercase
				"DisplaceKillTo"
				("ThenPromoteTo" "Knight")
			)
		)
		(piece "ferz_noCross" P1//Monk
			(move Step
				Diagonal
				"DisplaceKillTo"
				("ThenPromoteTo" "Bishop")
			)
		)
		(piece "smallSword" P1//Lance
			("SlideCapture"
				Forward
				~
				(then (set Counter))
				("ThenPromoteTo" "Rook")
			)
		)
		(piece "Dragon" P1//Dragon King, shogi style
			(or
				("SlideCapture" Orthogonal ~ (then (set Counter)) )
				//(move Slide Orthogonal "DisplaceKillTo")// <- If this replaces above line, it can only move one square orthogonally. Wut?
				(move Step Diagonal "DisplaceKillTo")
			)
		)
		(piece "knight_bishop" P1//Ninja, Bishop+Knight
			(or
				("LeapCapture" "KnightWalk" (then (set Counter)) )
				("SlideCapture" Diagonal ~ (then (set Counter)) )
			)
		)
		(map "King" {(pair 1 "E1") (pair 2 "E8")})
		(map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
		(map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
		(regions "Promotion" P1 (expand (sites Top)))
		(regions "Promotion" P2 (expand (sites Bottom)))
		(regions "DropZone" P1 (expand (sites Bottom) steps:3))
		(hand P1 size:6)
		(hand P2 size:1)//to prevent system complaints
	})
	(rules
		(start {
			(place "Pawn1" (sites Row 1))
			(place "Pawn2" (sites Row 6))
			(place "smallSword1" {"A1" "H1"}) (place "Horse1" {"B1" "G1"}) (place "Commoner1" coord:"D1") (place "King1" coord:"E1")
			(place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)
			(place "smallSword1" (handSite P1 0))
			(place "Horse1" (handSite P1 1))
			(place "ferz_noCross1" (handSite P1 2))
			(place "ferz_noCross1" (handSite P1 3))
			(place "Dragon1" (handSite P1 4))
			(place "knight_bishop1" (handSite P1 5))
		})

		(play
			(if "SameTurn"//should be unnecessary now that the pawn is changed
				(move Promote (last To) (piece {"Commoner" "Knight" "Bishop" "Rook"}) Mover)
				(do
					(or
						{
							(forEach Piece)
							("Castling")
							(move
								(from (sites Occupied by:Mover container:"Hand"))
								(to (intersection (sites Empty)(sites Mover "DropZone")))
							)
						}
					)
					ifAfterwards:(not ("IsInCheck" "King" Mover))
				)
			)
		)
		
		(end {
			("Checkmate" "King")
			("PieceTypeReachWin" "King1" (sites Top) P1)
			("PieceTypeReachWin" "King2" (sites Bottom) P2)
			(if
				(= (counter) 99)
				(result Mover Draw)
			)
			(if
				(no Moves Mover)
				(result Mover Loss)
			)
		})
	)
)

//------------------------------------------------------------------------------

(metadata 
	
	(info
		{
		(description "No.")
		(rules "Also No.")
		(source "<a href=\"https://www.pychess.org/variants/shinobi\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Pychess.org</a>")
		(version "1.3.12")
		(classification "board/war/replacement/checkmate/chess")
		(credit "Couch Tomato")
		(origin "This game was played on Pychess.org, from around 2021 to 2023.")
		}
	)
	
	(graphics {
		(player Colour P1 (colour Pink))
		(player Colour P2 (colour darkGrey))
		(show Check "King")
		(piece Scale "Pawn" 0.825)
		(piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
		(board Style Chess)
	})
	
	(ai 
		"Chess_ai"
	)
	
)

